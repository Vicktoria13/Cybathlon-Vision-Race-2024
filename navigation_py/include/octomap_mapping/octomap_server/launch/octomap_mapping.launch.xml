<!--
  Example launch file for octomap_server mapping:
  Listens to incoming PointCloud2 data and incrementally builds an octomap.
  The data is sent out in different representations.

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details
-->
<launch>
	<node pkg="octomap_server" exec="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />

		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" value="map" />

		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model.max_range" value="50.0" />

		<!--pour sauvegarder-->
		

		<!-- Permet de cropper en z : on se restreint a 1m80 de hauteur. Raisonnablement, on pose 20 cm de hauteur minimum pour
		un obstacle-->
		<param name="occupancy_min_z" value="0.2"/>
		<param name="occupancy_max_z" value="1.8"/>

		<param name="filter_speckles" value="true"/>

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/zed2/zed_node/mapping/fused_cloud"/>


	</node>




</launch>
